{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Jagr","text":"<p>The Jagr AutoGrader is a powerful tool for grading programming assignments, providing detailed test results in the form of rubrics for each submission.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Easy Submission Process for students via Gradle Plugin</li> <li>Fluent API for defining grading rubric</li> <li>Write tests in familiar JUnit 5 style</li> <li>Access to the submission's source code in tests</li> <li>Integration with powerful bytecode manipulation tools such as ASM</li> <li>Detailed test results in the form of rubrics</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>See basic command-line usage here.</p> <p>Join us on discord if you have any questions.</p>"},{"location":"architecture/grader/","title":"Grader","text":"<p>A grader is a Gradle project that contains the JUnit tests and rubric definitions for a specific assignment. To get started, create a new Gradle project and add the jagr-gradle plugin to your buildscript.</p> <p>In general, a simple grader is a single-module Gradle project with the following source sets:</p> <ul> <li><code>grader</code> - The JUnit tests and rubric definitions</li> <li><code>main</code> - The solution source code (analogous to the <code>main</code> source set the student's submission)</li> </ul> <p>It is possible to customize the source sets used by the grader, for example by separating public and private test (public tests being tests that are distributed to the students for local execution before submission).</p> <ul> <li><code>graderPrivate</code> - The JUnit tests and rubric definitions that are kept private</li> <li><code>graderPublic</code> - The JUnit tests and rubric definitions that are distributed to the students</li> <li><code>main</code> - The solution source code (analogous to the <code>main</code> source set the student's submission)</li> </ul> <p>In this case, executing the <code>graderPrivate</code> will also execute the <code>graderPublic</code> tests.</p>"},{"location":"architecture/submission/","title":"Submission","text":"<p>A submission is the final product to be graded. It is created via the <code>mainBuildSubmission</code> task in the jagr-gradle plugin.</p>"},{"location":"development/getting-started/gradle-setup/","title":"Gradle Setup","text":""},{"location":"development/getting-started/gradle-setup/#adding-the-plugin","title":"Adding the plugin","text":"<p>The jagr-gradle plugin is a Gradle plugin that makes it easier to develop graders and submissions for Jagr. In order to use it, you must have Gradle set up for your project. If you do not have Gradle set up, you can follow the Gradle Getting Started Guide or create a new Gradle project using the IntelliJ project creation wizard. Using the Kotlin DSL is recommended over the Groovy DSL. The code snippets in this documentation will use the Kotlin DSL.</p> <p>Tip</p> <p>Using the IntelliJ project creation wizard is the easiest way to get started with Gradle.</p> <p>Add the jagr-gradle plugin to your buildscript:</p> build.gradle.kts<pre><code>plugins {\nid(\"org.sourcegrade.jagr-gradle\") version \"0.6.0\"\n}\n</code></pre> <p>This will automatically add a dependency on jagr-launcher and jagr-grader-api.</p>"},{"location":"development/getting-started/gradle-setup/#configuring-the-jagr-extension","title":"Configuring the jagr extension","text":"<p>The jagr extension is used to configure the jagr-gradle plugin. It has the following properties:</p> Property Description <code>assignmentId</code> The id of the assignment <code>graders</code> The grader configurations. <code>submissions</code> The submission configurations."},{"location":"development/getting-started/gradle-setup/#minimal-configuration","title":"Minimal Configuration","text":"build.gradle.kts<pre><code>jagr {\nassignmentId.set(\"h00\")\nsubmissions {\nval main by creating { // (1)!\nstudentId.set(\"ab12cdef\")\nfirstName.set(\"John\")\nlastName.set(\"Smith\")\n}\n}\ngraders {\nval grader by creating {\ngraderName.set(\"FOP-2223-H00\")\n}\n}\n}\n</code></pre> <ol> <li>This method of assigning a variable is called a delegate property.    The <code>creating</code> method returns a delegate which uses the name of the variable to create a new submission configuration.</li> </ol>"},{"location":"development/getting-started/gradle-setup/#customizing-the-submission-name","title":"Customizing the submission name","text":"<p>Graders must run against a specific submission. By default, graders assumes a submission name of \"main\" as in the minimal example. If you want to use a different name, you must manually specify which submission the grader should use when grading via the <code>submission()</code> method.</p> build.gradle.kts<pre><code>jagr {\n// ...\nsubmissions {\nval customSubmission by creating {\n// ...\n}\n}\ngraders {\nval grader by creating {\nsubmission(submissions[\"customSubmission\"])\n// ...\n}\n}\n}\n</code></pre>"},{"location":"development/getting-started/gradle-setup/#defining-custom-source-sets","title":"Defining custom source sets","text":"<p>Submissions and graders use certain source sets by default.</p> Kind Source Sets Submission <code>main</code> and <code>test</code> Grader Same as configuration name <p>The source sets used are defined by the <code>from()</code> method.</p> build.gradle.kts<pre><code>jagr {\n// ...\nsubmissions {\nval main by creating {\nfrom(\"main\", \"test\") // default value, not needed\n// ...\n}\n}\ngraders {\nval grader by creating {\nfrom(\"grader\") // default value, not needed\n// ...\n}\n}\n}\n</code></pre> <p>You may provide any source set name and it will be created (if not already present).</p>"},{"location":"development/getting-started/gradle-setup/#compiling-against-a-different-submission","title":"Compiling against a different submission","text":"<p>Graders must be compiled against a specific submission. By default, graders are compiled against the submission defined by the <code>submission()</code> method (or the \"main\" submission if none is explicitly defined for the grader). To compile against a different submission, use the <code>solution()</code> method.</p> build.gradle.kts<pre><code>jagr {\n// ...\nsubmissions {\nval correctSubmission by creating {\n// ...\n}\nval incorrectSubmission by creating {\n// ...\n}\n}\ngraders {\nval grader by creating {\n// compiled against this submission\nsolution(submissions[\"correctSubmission\"])\n// graded against this submission\nsubmission(submissions[\"incorrectSubmission\"])\n// ...\n}\n}\n}\n</code></pre>"},{"location":"development/grader-api/criterion/","title":"Criterion - Overview","text":""},{"location":"development/grader-api/criterion/#usage","title":"Usage","text":"<p>Create a basic <code>Criterion</code>:</p> Java<pre><code>public static final Criterion H1_1 = Criterion.builder()\n.shortDescription(\"Some short description\")\n.grader(\nGrader.testAwareBuilder()\n.requirePass(JUnitTestRef.ofMethod(() -&gt; Tests.class.getMethod(\"testPositiveInts\")))\n.requirePass(JUnitTestRef.ofMethod(() -&gt; Tests.class.getMethod(\"testNegativeInts\")))\n.maxPoints(3) // default maxPoints is 1\n.minPoints(-1) // default minPoints is 0\n.pointsPassedMax() // award maximum points if ALL tests passed\n.pointsFailedMin() // award minimum points if ANY test failed\n.build()\n).build();\n</code></pre>"},{"location":"development/grader-api/rubric/","title":"Rubric","text":""},{"location":"development/grader-api/rubric/#rubric-the-basics","title":"Rubric - The basics","text":"<p>A rubric defines the way a submission should be graded. In the form of a table, a rubric may look something like this:</p>"},{"location":"development/grader-api/rubric/#recursive-fibonacci-rubric","title":"Recursive Fibonacci rubric","text":"Criterion Max points Min points The method has javadoc 0 -1 The method is recursive 1 0 The method works for n = 0 and n = 1 1 0 The method works for n &gt;= 0 1 0 <p>Every row in the above table represents a criterion, which may be applied to a submission. This process is called grading and produces a grader rubric composed of graded criteria. The result may look something like this:</p>"},{"location":"development/grader-api/rubric/#recursive-fibonacci-graded-rubric","title":"Recursive Fibonacci graded rubric","text":"Criterion Max points Min points Actual points The method has javadoc 0 -1 0 The method is recursive 1 0 1 The method works for n = 0 and n = 1 1 0 1 The method works for n &gt;= 0 1 0 1 Total - - 3"},{"location":"development/grader-api/rubric/#writing-a-rubric","title":"Writing a rubric","text":"<p>To get started writing a rubric, create a class that implements <code>RubricProvider</code> and annotate it with <code>@RubricForSubmission</code></p> Java<pre><code>import org.sourcegrade.jagr.api.rubric.*;\n@RubricForSubmission(\"h00\")\npublic class H00_RubricProvider implements RubricProvider {\n}\n</code></pre> <p>The next step is to create a very basic rubric. This may be done like this with the rubric builder.</p> Java<pre><code>public static final Rubric RUBRIC = Rubric.builder()\n.title(\"My awesome rubric\")\n.build();\n</code></pre> <p>Finally, create a <code>RUBRIC</code> field and implement <code>getRubric()</code>. The end result is:</p> Java<pre><code>import org.sourcegrade.jagr.api.rubric.*;\n@RubricForSubmission(\"h00\")\npublic class H00_RubricProvider implements RubricProvider {\npublic static final Rubric RUBRIC = Rubric.builder()\n.title(\"My awesome rubric\")\n.build();\n@Override\npublic Rubric getRubric() {\nreturn RUBRIC;\n}\n}\n</code></pre> <p>This will create an empty rubric for the assignment <code>h00</code>.</p>"},{"location":"usage/command-line/basics/","title":"Basic Command-Line Usage","text":"<ol> <li>Create a grader</li> <li>Create a submission</li> <li> <p>Download the latest release</p> <p>Tip</p> <p>The jagr-bin package is available on the AUR for Arch Linux users.</p> </li> <li> <p>Create an empty working directory and copy the Jagr jar into it</p> </li> <li> <p>Run <code>java -jar Jagr-&lt;version&gt;.jar</code>, which should create the following folder structure:</p> Text Only<pre><code>./graders -- input folder for grader jars (tests and rubric providers)\n./libs -- for libraries that are required on each submission's classpath\n./logs -- saved log files\n./rubrics -- the output folder for graded rubrics\n./submissions -- input folder for submissions\n./submissions-export -- output folder for submissions\n</code></pre> </li> <li> <p>Prepare the grader and submission for grading</p> <ol> <li>Prepare the grader jar by running the <code>graderBuildGrader</code> Gradle task in the grader project</li> <li>Prepare the submission jar by running the <code>mainBuildSubmission</code> Gradle task in the submission project</li> <li>Locate the respective jars in the <code>build/libs</code> folder of the grader and submission projects</li> </ol> </li> <li> <p>Copy the grader jar into the <code>graders</code> folder and the submission jar into the <code>submissions</code> folder.    If the grader requires any runtime dependencies (that are not already included in Jagr), copy them into the <code>libs</code> folder</p> <p>Tip</p> <p>The <code>graderBuildLibs</code> gradle task provided by the jagr-gradle plugin can be used to generate a fat jar containing all runtime dependencies. This task automatically excludes dependencies already present in the Jagr runtime.</p> </li> <li> <p>Run <code>java -jar Jagr-x-x-x.jar</code> again to grade the submission</p> </li> </ol>"},{"location":"usage/command-line/options/","title":"Command-Line Options","text":""},{"location":"usage/command-line/options/#-no-export-n","title":"--no-export, -n","text":"<p>Do not export submissions.</p>"},{"location":"usage/command-line/options/#-export-only-e","title":"--export-only, -e","text":"<p>Do not grade, only export submissions.</p>"},{"location":"usage/command-line/options/#-progress","title":"--progress","text":"<p>Progress bar style.</p> <p>Choices: \"rainbow\", \"xmas\"</p>"},{"location":"usage/command-line/options/#-child-internal","title":"--child (internal)","text":"<p>Waits to receive grading job details via IPC</p>"},{"location":"usage/getting-started/installation/","title":"Installation","text":""},{"location":"usage/getting-started/installation/#github-binary-download","title":"GitHub Binary Download","text":"<p>In most cases, the quickest way to install Jagr is by downloading the latest binary on the GitHub releases page.</p>"},{"location":"usage/getting-started/installation/#arch-based-linux","title":"Arch-based Linux","text":"<p>The AUR package jagr-bin is available and may be installed with:</p> Bash<pre><code>yay -S jagr-bin\n</code></pre>"},{"location":"usage/getting-started/installation/#build-from-source","title":"Build from source","text":"<p>In order to build Jagr from source, you must have git and Java version 11 or later installed.</p>"},{"location":"usage/getting-started/installation/#clone-the-repository","title":"Clone the repository","text":"Via SSH Bash<pre><code>git clone git@github.com:sourcegrade/jagr.git\n</code></pre> Via HTTPS Bash<pre><code>git clone https://github.com/sourcegrade/jagr.git\n</code></pre>"},{"location":"usage/getting-started/installation/#build-the-project","title":"Build the project","text":"Bash<pre><code>cd jagr\n./gradlew build\n</code></pre> <p>The compiled jar will be located in <code>./build/libs/</code>.</p>"}]}